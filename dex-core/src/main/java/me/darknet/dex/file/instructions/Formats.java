package me.darknet.dex.file.instructions;

import java.lang.reflect.Field;

public class Formats implements Opcodes {

    private static FormatCodec<?>[] CODECS = new FormatCodec<?>[256];
    private static String[] OP_NAMES = new String[256];

    private static void put(FormatCodec<?> codec, int... opcodes) {
        for (int opcode : opcodes) {
            CODECS[opcode] = codec;
        }
    }

    public static FormatCodec<?> get(int opcode) {
        return CODECS[opcode];
    }

    public static String getOpcodeName(int opcode) {
        return OP_NAMES[opcode];
    }

    static {
        put(Format00op.CODEC, NOP, RETURN_VOID, RETURN_VOID_BARRIER);
        put(FormatBAop.CODEC, MOVE, MOVE_WIDE, MOVE_OBJECT, ARRAY_LENGTH, NEG_INT, NOT_INT, NEG_LONG, NOT_LONG,
                NEG_FLOAT, NEG_DOUBLE, INT_TO_LONG, INT_TO_FLOAT, INT_TO_DOUBLE, LONG_TO_INT, LONG_TO_FLOAT,
                LONG_TO_DOUBLE, FLOAT_TO_INT, FLOAT_TO_LONG, FLOAT_TO_DOUBLE, DOUBLE_TO_INT, DOUBLE_TO_LONG,
                DOUBLE_TO_FLOAT, INT_TO_BYTE, INT_TO_CHAR, INT_TO_SHORT, ADD_INT_2ADDR, SUB_INT_2ADDR, MUL_INT_2ADDR,
                DIV_INT_2ADDR, REM_INT_2ADDR, AND_INT_2ADDR, OR_INT_2ADDR, XOR_INT_2ADDR, SHL_INT_2ADDR, SHR_INT_2ADDR,
                USHR_INT_2ADDR, ADD_LONG_2ADDR, SUB_LONG_2ADDR, MUL_LONG_2ADDR, DIV_LONG_2ADDR, REM_LONG_2ADDR,
                AND_LONG_2ADDR, OR_LONG_2ADDR, XOR_LONG_2ADDR, SHL_LONG_2ADDR, SHR_LONG_2ADDR, USHR_LONG_2ADDR,
                ADD_FLOAT_2ADDR, SUB_FLOAT_2ADDR, MUL_FLOAT_2ADDR, DIV_FLOAT_2ADDR, REM_FLOAT_2ADDR, ADD_DOUBLE_2ADDR,
                SUB_DOUBLE_2ADDR, MUL_DOUBLE_2ADDR, DIV_DOUBLE_2ADDR, REM_DOUBLE_2ADDR, CONST_4);
        put(FormatAAop.CODEC, MOVE_RESULT, MOVE_RESULT_WIDE, MOVE_RESULT_OBJECT, MOVE_EXCEPTION, RETURN, RETURN_WIDE,
                RETURN_OBJECT, MONITOR_ENTER, MONITOR_EXIT, THROW, GOTO);
        put(Format00opAAAA.CODEC, GOTO_16);
        put(FormatAAopBBBB.CODEC, IF_EQZ, IF_GEZ, IF_GTZ, IF_LEZ, IF_LTZ, IF_NEZ, MOVE_FROM16, MOVE_WIDE_FROM16,
                MOVE_OBJECT_FROM16, CONST_16, CONST_HIGH16, CONST_WIDE_16, CONST_WIDE_HIGH16, CONST_STRING,
                CONST_CLASS, CONST_METHOD_HANDLE, CONST_METHOD_TYPE, CHECK_CAST, NEW_INSTANCE, SGET, SGET_WIDE,
                SGET_OBJECT, SGET_BOOLEAN, SGET_BYTE, SGET_CHAR, SGET_SHORT, SPUT, SPUT_WIDE, SPUT_OBJECT, SPUT_BOOLEAN,
                SPUT_BYTE, SPUT_CHAR, SPUT_SHORT, SGET_VOLATILE, SPUT_VOLATILE, SGET_WIDE_VOLATILE, SPUT_WIDE_VOLATILE);
        put(FormatAAopCCBB.CODEC, CMPL_FLOAT, CMPG_FLOAT, CMPL_DOUBLE, CMPG_DOUBLE, CMP_LONG, AGET, AGET_WIDE,
                AGET_OBJECT, AGET_BOOLEAN, AGET_BYTE, AGET_CHAR, AGET_SHORT, APUT, APUT_WIDE, APUT_OBJECT, APUT_BOOLEAN,
                APUT_BYTE, APUT_CHAR, APUT_SHORT, ADD_INT, SUB_INT, MUL_INT, DIV_INT, REM_INT, AND_INT, OR_INT, XOR_INT,
                SHL_INT, SHR_INT, USHR_INT, ADD_LONG, SUB_LONG, MUL_LONG, DIV_LONG, REM_LONG, AND_LONG, OR_LONG, XOR_LONG,
                SHL_LONG, SHR_LONG, USHR_LONG, ADD_FLOAT, SUB_FLOAT, MUL_FLOAT, DIV_FLOAT, REM_FLOAT, ADD_DOUBLE,
                SUB_DOUBLE, MUL_DOUBLE, DIV_DOUBLE, REM_DOUBLE, ADD_INT_LIT8, RSUB_INT_LIT8, MUL_INT_LIT8, DIV_INT_LIT8,
                REM_INT_LIT8, AND_INT_LIT8, OR_INT_LIT8, XOR_INT_LIT8, SHL_INT_LIT8, SHR_INT_LIT8, USHR_INT_LIT8);
        put(FormatBAopCCCC.CODEC, IF_EQ, IF_GE, IF_GT, IF_LE, IF_LT, IF_NE, ADD_INT_LIT16, RSUB_INT, MUL_INT_LIT16,
                DIV_INT_LIT16, REM_INT_LIT16, AND_INT_LIT16,
                OR_INT_LIT16, XOR_INT_LIT16, INSTANCE_OF, NEW_ARRAY, IGET, IGET_WIDE, IGET_OBJECT, IGET_BOOLEAN,
                IGET_BYTE, IGET_CHAR, IGET_SHORT, IPUT, IPUT_WIDE, IPUT_OBJECT, IPUT_BOOLEAN, IPUT_BYTE, IPUT_CHAR,
                IPUT_SHORT, IPUT_VOLATILE, IGET_VOLATILE, IGET_WIDE_VOLATILE, IPUT_WIDE_VOLATILE, IGET_QUICK, IGET_WIDE_QUICK,
                IGET_OBJECT_QUICK, IPUT_QUICK, IPUT_WIDE_QUICK, IPUT_OBJECT_QUICK);
        put(Format00opAAAA32.CODEC, GOTO_32);
        put(Format00opAAAABBBB.CODEC, MOVE_16, MOVE_WIDE_16, MOVE_OBJECT_16);
        put(FormatAAopBBBB32.CODEC, CONST, CONST_WIDE_32, FILL_ARRAY_DATA, PACKED_SWITCH, SPARSE_SWITCH,
                CONST_STRING_JUMBO);
        put(FormatAGopBBBBFEDC.CODEC, FILLED_NEW_ARRAY, INVOKE_VIRTUAL, INVOKE_SUPER, INVOKE_STATIC, INVOKE_DIRECT, INVOKE_INTERFACE,
                INVOKE_CUSTOM, INVOKE_VIRTUAL_QUICK, EXECUTE_INLINE);
        put(FormatAAopBBBBCCCC.CODEC, FILLED_NEW_ARRAY_RANGE, INVOKE_VIRTUAL_RANGE, INVOKE_SUPER_RANGE,
                INVOKE_DIRECT_RANGE, INVOKE_STATIC_RANGE, INVOKE_INTERFACE_RANGE, INVOKE_CUSTOM_RANGE,
                INVOKE_VIRTUAL_QUICK_RANGE, EXECUTE_INLINE_RANGE);
        put(FormatAGopBBBBFEDCHHHH.CODEC, INVOKE_POLYMORPHIC);
        put(FormatAAopBBBBCCCCHHHH.CODEC, INVOKE_POLYMORPHIC_RANGE);
        put(FormatAAopBBBB64.CODEC, CONST_WIDE);

        // read opcode names
        for (Field field : Opcodes.class.getFields()) {
            try {
                int value = field.getInt(null);
                OP_NAMES[value] = field.getName().toLowerCase();
            } catch (IllegalAccessException e) {
                e.printStackTrace();
            }
        }
    }


}
